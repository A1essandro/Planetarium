@page "/counter"
@using Internal
@using Planetarium
@using System.Numerics

<div>

    <div>@ExMessage</div>
    <div @onclick=Tick>@frame</div>
    <div>@AvgCoords</div>

    <svg xmlns="http://www.w3.org/2000/svg" style="width: 100%; height: 1000px">

        <circle cx="100" cy="100" r="15" fill="#faa" stroke="#fff" />
        @foreach (var planet in Universe.Objects.OfType<Planet>())
        {
            <circle cx=@Math.Round(planet.Position.X) cy=@Math.Round(planet.Position.Y) r=12 fill="#04dcd2" stroke="#fff" />
            <line x1=@Math.Round(planet.Position.X) y1=@Math.Round(planet.Position.Y)
              x2=@Math.Round(planet.Position.X+planet.Speed.X) y2=@Math.Round(planet.Position.Y+planet.Speed.Y)
              stroke="red" />
        }


    </svg>
</div>

@code {

    private int[] planets = Array.Empty<int>();
    private int currentCount = 0;
    private int frame = 1;
    private string ExMessage = "No error";
    private float AvgCoords = 0;

    private static IGravity Gravity = new Gravity(0.1);
    private IUniverseTime UniverseTime = new UniverseTime(Gravity);
    private IUniverse Universe = new Universe();

    protected override Task OnInitializedAsync()
    {
        GeneratePlanets(7);

        return Task.CompletedTask;
    }

    private void GeneratePlanets(int qty)
    {
        var rand = new Random();
        var planets = new List<Planet>(qty);
        for (var i = 0; i < qty; i++)
        {
            planets.Add(new Planet
                {
                    Speed = new Vector3(rand.Next(0, 10) - 5, rand.Next(0, 10) - 5, 0),
                    Position = new Vector3(rand.Next(0, 500), rand.Next(0, 500), 0),
                    Weight = rand.Next(1, 100)
                });
        }
        Universe.Objects = planets.ToArray();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(10);
        await Tick();
        StateHasChanged();
    }

    private async Task Tick()
    {
        try
        {
            AvgCoords = Universe.Objects.OfType<Planet>().Sum(x => x.Position.X + x.Position.Y);
            await UniverseTime.Tick(Universe);
            frame++;
        }
        catch (Exception ex)
        {
            ExMessage = string.Concat(ex.Message, ex.StackTrace);
        }
    }

}
